{"version":3,"sources":["SlidingPuzzle/Board/Box.jsx","SlidingPuzzle/Algorithm/Helpers.js","SlidingPuzzle/Algorithm/BruteForce.js","SlidingPuzzle/Visualize/Visualize.js","SlidingPuzzle/Algorithm/Algorithms.js","SlidingPuzzle/Board/Board.js","SlidingPuzzle/Board/Puzzle.jsx","SlidingPuzzle/Board/App.js","SlidingPuzzle/SlidingPuzzle.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","boxNumber","onClick","row","column","className","id","EMPTY","checkBoard","board","finalBoard","length","getFinalBoard","boardSize","current","newRow","push","findOpenBox","move","legalFriends","getNeighbors","i","box","value","moveHelper","zero","newBoard","j","neighbors","undefined","getRandomXY","Math","floor","random","VisualizeNoAnimation","SliderPuzzle","moves","setTimeout","state","animationSpeed","getDirection","currentRow","currentColumn","newColumn","Run","Puzzle","algorithm","count","currentBoard","slice","BruteForce","console","log","animation","open","getMatrix","pastMove","direction","document","getElementById","Visualize","Board","size","this","getNewBoard","matrix","boardToMatrix","scramble","Array","from","_","b","matrixToBoard","sort","rowColLength","sqrt","currRow","props","newGame","setState","isWin","changeBoardSize","amount","newSize","newMoveInfo","makeMove","setBoard","prevState","getRow","rowData","key","map","bNum","solve","boardCopy","rows","message","class","toString","toUpperCase","Component","App","SlidingPizzle","Boolean","window","location","hostname","match","BrowserRouter","require","ReactDOM","render","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7238ebb1.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Stateless react component\r\n// Note: the {boxNumber} is ES6 feature called Destructuring Assignment\r\n// read all about it here: http://es6-features.org/#ParameterContextMatching\r\nexport default function Box({ boxNumber, onClick, row, column }) {\r\n  const EMPTY_CLASS = 'empty';\r\n  return (\r\n    <span\r\n      onClick={onClick}\r\n      className={!boxNumber ? EMPTY_CLASS : null}\r\n      id={'box-' + row + '-' + column}\r\n      row={row}\r\n      column={column}\r\n    >\r\n      {boxNumber || ''}\r\n    </span>\r\n  );\r\n}\r\n\r\nBox.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  boxNumber: PropTypes.number.isRequired\r\n};\r\n","const EMPTY = 0;\r\n\r\nexport function checkBoard(board, finalBoard) {\r\n  for (let row = 0; row < board.length; row += 1) {\r\n    for (let column = 0; column < board.length; column += 1) {\r\n      if (board[row][column] !== finalBoard[row][column]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getFinalBoard(boardSize) {\r\n  const board = [];\r\n  let current = 1;\r\n  for (let row = 0; row < boardSize; row += 1) {\r\n    const newRow = [];\r\n    for (let column = 0; column < boardSize; column += 1) {\r\n      newRow.push(current);\r\n      current += 1;\r\n    }\r\n    board.push(newRow);\r\n  }\r\n  board[boardSize - 1][boardSize - 1] = 0;\r\n  return board;\r\n}\r\n\r\n/**\r\n * Find the row and column holding the 0 value.\r\n * @param {*} board the slider board\r\n */\r\nexport function findOpenBox(board) {\r\n  for (let row = 0; row < board.length; row += 1) {\r\n    for (let column = 0; column < board.length; column += 1) {\r\n      if (board[row][column] === 0) {\r\n        return { row, column };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * moves the tile at the given (i,j) cordinates\r\n * to the current empty space (only if legal)\r\n * @param {*} i row index\r\n * @param {*} j column index\r\n */\r\nexport function move(board, row, column) {\r\n  let legalFriends = getNeighbors(board, row, column);\r\n  for (let i = 0; i < legalFriends.length; i += 1) {\r\n    const box = legalFriends[i];\r\n    if (box.value === EMPTY) {\r\n      return moveHelper(board, box, row, column);\r\n    }\r\n  }\r\n  return board;\r\n}\r\n\r\nconst moveHelper = (board, zero, row, column) => {\r\n  const newBoard = [];\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    const newRow = [];\r\n    for (let j = 0; j < board.length; j += 1) {\r\n      newRow.push(board[i][j]);\r\n    }\r\n    newBoard.push(newRow);\r\n  }\r\n  newBoard[zero.row][zero.column] = newBoard[row][column];\r\n  newBoard[row][column] = EMPTY;\r\n  return newBoard;\r\n};\r\n\r\nexport function getNeighbors(board, row, column) {\r\n  const neighbors = [];\r\n  if (board[row - 1] !== undefined && board[row - 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row - 1][column],\r\n      row: row - 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row + 1] !== undefined && board[row + 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row + 1][column],\r\n      row: row + 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row][column - 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column - 1],\r\n      row: row,\r\n      column: column - 1\r\n    });\r\n\r\n  if (board[row][column + 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column + 1],\r\n      row: row,\r\n      column: column + 1\r\n    });\r\n\r\n  return neighbors;\r\n}\r\n","import {\r\n  getFinalBoard,\r\n  move,\r\n  getNeighbors,\r\n  findOpenBox,\r\n  checkBoard\r\n} from './Helpers';\r\n\r\nexport function BruteForce(board) {\r\n  const finalBoard = getFinalBoard(board.length);\r\n  const moves = [];\r\n  let count = 0;\r\n  let currentBoard = board.slice();\r\n\r\n  while (!checkBoard(currentBoard, finalBoard) && count < 20) {\r\n    const random = getRandomXY(currentBoard, findOpenBox(currentBoard));\r\n    currentBoard = move(currentBoard, random.row, random.column);\r\n    moves.push({ row: random.row, column: random.column });\r\n    count += 1;\r\n  }\r\n\r\n  return moves;\r\n}\r\n\r\nfunction getRandomXY(board, { row, column }) {\r\n  const neighbors = getNeighbors(board, row, column);\r\n  return neighbors[Math.floor(Math.random() * neighbors.length)];\r\n}\r\n","import { findOpenBox } from '../Algorithm/Helpers';\r\n\r\nexport function Visualize(SliderPuzzle, moves) {\r\n  if (!SliderPuzzle.state.animation) {\r\n    VisualizeNoAnimation(SliderPuzzle, moves);\r\n    return;\r\n  }\r\n\r\n  const open = findOpenBox(SliderPuzzle.state.board.getMatrix());\r\n  let pastMove = { row: open.row, column: open.column };\r\n  for (let i = 0; i < moves.length; i += 1) {\r\n    const { row, column } = moves[i];\r\n\r\n    setTimeout(() => {\r\n      const direction = getDirection(\r\n        row,\r\n        column,\r\n        pastMove.row,\r\n        pastMove.column\r\n      );\r\n      document.getElementById(\r\n        'box-' + row + '-' + column\r\n      ).className = direction;\r\n\r\n      setTimeout(() => {\r\n        document.getElementById('box-' + row + '-' + column).className = '';\r\n        document.getElementById(\r\n          'box-' + pastMove.row + '-' + pastMove.column\r\n        ).className = 'empty';\r\n        SliderPuzzle.move(column, row);\r\n        pastMove = { row, column };\r\n      }, 500);\r\n    }, 1000 * i);\r\n  }\r\n}\r\n\r\nconst VisualizeNoAnimation = (SliderPuzzle, moves) => {\r\n  for (let i = 0; i < moves.length; i += 1) {\r\n    const { row, column } = moves[i];\r\n    setTimeout(() => {\r\n      SliderPuzzle.move(column, row);\r\n    }, SliderPuzzle.state.animationSpeed * i);\r\n  }\r\n};\r\n\r\nconst getDirection = (currentRow, currentColumn, newRow, newColumn) => {\r\n  if (currentRow < newRow) {\r\n    return 'move-down';\r\n  } else if (currentRow > newRow) {\r\n    return 'move-up';\r\n  } else if (currentColumn < newColumn) {\r\n    return 'move-left';\r\n  } else if (currentColumn > newColumn) {\r\n    return 'move-right';\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n","import { BruteForce } from './BruteForce';\r\nimport { Visualize } from '../Visualize/Visualize';\r\n\r\nexport function Run(Puzzle, board, algorithm) {\r\n  let moves = [];\r\n  switch (algorithm) {\r\n    case 'BruteForce':\r\n      moves = BruteForce(board);\r\n      break;\r\n    default:\r\n      console.log('no algorithm');\r\n      break;\r\n  }\r\n  if (moves.length > 0) Visualize(Puzzle, moves);\r\n}\r\n","import { getNeighbors } from '../Algorithm/Helpers';\r\n\r\nconst EMPTY = 0;\r\n\r\nexport default class Board {\r\n  constructor(size) {\r\n    const board = this.getNewBoard(size);\r\n    this.board = board;\r\n    this.matrix = boardToMatrix(board);\r\n    this.size = size;\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the board\r\n   */\r\n  getBoard() {\r\n    return this.board.slice(0);\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the matrix\r\n   */\r\n  getMatrix() {\r\n    return this.matrix;\r\n  }\r\n\r\n  getNewBoard(size) {\r\n    return scramble(Array.from({ length: size * size }, (_, b) => b));\r\n  }\r\n\r\n  makeMove(newRow, newColumn) {\r\n    return move(this.getMatrix(), newRow, newColumn);\r\n  }\r\n\r\n  setBoard(matrix) {\r\n    this.board = matrixToBoard(matrix);\r\n    this.matrix = matrix;\r\n  }\r\n}\r\n\r\n/**\r\n * Scrambles the board randomly in a solvable way.\r\n */\r\nconst scramble = board => {\r\n  return board.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst boardToMatrix = board => {\r\n  const rowColLength = Math.sqrt(board.length, 2);\r\n  const matrix = [];\r\n  let count = 0;\r\n  for (let row = 0; row < rowColLength; row += 1) {\r\n    const currRow = [];\r\n    for (let column = 0; column < rowColLength; column += 1) {\r\n      currRow.push(board[count]);\r\n      count += 1;\r\n    }\r\n    matrix.push(currRow);\r\n  }\r\n  return matrix;\r\n};\r\n\r\nconst matrixToBoard = matrix => {\r\n  const board = [];\r\n  let count = 0;\r\n  for (let row = 0; row < matrix.length; row += 1) {\r\n    for (let column = 0; column < matrix.length; column += 1) {\r\n      board.push(matrix[count]);\r\n      count += 1;\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\n/**\r\n * moves the tile at the given (i,j) cordinates\r\n * to the current empty space (only if legal)\r\n * @param {*} i row index\r\n * @param {*} j column index\r\n */\r\nconst move = (board, row, column) => {\r\n  let legalFriends = getNeighbors(board, row, column);\r\n  for (let i = 0; i < legalFriends.length; i += 1) {\r\n    const box = legalFriends[i];\r\n    if (box.value === EMPTY) {\r\n      return {\r\n        board: moveHelper(board, box, row, column),\r\n        row: box.row,\r\n        column: box.column\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    board,\r\n    newRow: null,\r\n    newColumn: null\r\n  };\r\n};\r\n\r\nconst moveHelper = (board, zero, row, column) => {\r\n  const newBoard = [];\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    const newRow = [];\r\n    for (let j = 0; j < board.length; j += 1) {\r\n      newRow.push(board[i][j]);\r\n    }\r\n    newBoard.push(newRow);\r\n  }\r\n  newBoard[zero.row][zero.column] = newBoard[row][column];\r\n  newBoard[row][column] = EMPTY;\r\n  return newBoard;\r\n};\r\n","import React, { Component } from 'react';\r\nimport Box from './Box';\r\nimport { Run } from '../Algorithm/Algorithms';\r\nimport { checkBoard, getFinalBoard } from '../Algorithm/Helpers';\r\nimport Board from './Board';\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const board = new Board(this.props.size);\r\n    this.state = {\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size)),\r\n      //animation true false - slows algorithm solving if true\r\n      animation: false,\r\n      animationSpeed: 100 // only matters if flase - if true, animation speed it fixed\r\n    };\r\n  }\r\n\r\n  newGame = () => {\r\n    const board = new Board(this.props.size);\r\n    this.setState({\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size))\r\n    });\r\n  };\r\n\r\n  changeBoardSize = amount => {\r\n    const newSize = this.state.board.size + amount;\r\n    if (newSize < 3 || newSize > 10) return;\r\n    const board = new Board(newSize);\r\n    this.setState({\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size))\r\n    });\r\n  };\r\n\r\n  //note declaring class function as an arrow function gives us automatic 'this' binding.\r\n  // in y, x\r\n  move = (column, row) => {\r\n    if (this.state.isWin) return;\r\n\r\n    const newMoveInfo = this.state.board.makeMove(row, column);\r\n    if (newMoveInfo.newRow !== null) {\r\n      this.state.board.setBoard(newMoveInfo.board);\r\n      this.setState(prevState => ({\r\n        moves: prevState.moves + 1,\r\n        isWin: checkBoard(\r\n          this.state.board.getMatrix(),\r\n          getFinalBoard(this.state.board.size)\r\n        )\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * returns a single slider row given the row data\r\n   * @param {Object} rowData row data\r\n   * @param {Number} i row number\r\n   */\r\n  getRow = (rowData, j) => {\r\n    return (\r\n      <div key={j}>\r\n        {rowData.map((bNum, i) => (\r\n          <Box\r\n            key={bNum}\r\n            boxNumber={bNum}\r\n            row={j}\r\n            column={i}\r\n            onClick={() => this.move(i, j)}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  solve = () => {\r\n    const boardCopy = this.state.board.getMatrix();\r\n    Run(this, boardCopy, 'BruteForce');\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.board.getMatrix().map(this.getRow);\r\n    let message =\r\n      (this.state.isWin ? 'Winner !!! ' : 'Total ') +\r\n      `Moves: ${this.state.moves}`;\r\n    return (\r\n      <>\r\n        Slider Puzzle Solver {this.state.board.size}x{this.state.board.size}\r\n        <div className=\"slider-board\">\r\n          {rows}\r\n          <span className=\"slider-msg\">{message}</span>\r\n          <div className=\"btn-new-game\">\r\n            <button onClick={this.newGame}>New Game</button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(1);\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(-1);\r\n              }}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n          <span className=\"slider-msg-2\">\r\n            Solve Speed: {this.state.animationSpeed}\r\n          </span>\r\n          <div>\r\n            <button\r\n              class=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animationSpeed:\r\n                    prevState.animationSpeed >= 100\r\n                      ? prevState.animationSpeed < 10000\r\n                        ? prevState.animationSpeed + 100\r\n                        : prevState.animationSpeed\r\n                      : prevState.animationSpeed + 10\r\n                }));\r\n              }}\r\n            >\r\n              Increase\r\n            </button>\r\n            <button\r\n              class=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animation: !prevState.animation\r\n                }));\r\n              }}\r\n            >\r\n              Animation Active: {this.state.animation.toString().toUpperCase()}\r\n            </button>\r\n            <button\r\n              class=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animationSpeed:\r\n                    prevState.animationSpeed > 100\r\n                      ? prevState.animationSpeed - 100\r\n                      : prevState.animationSpeed > 10\r\n                      ? prevState.animationSpeed - 10\r\n                      : 10\r\n                }));\r\n              }}\r\n            >\r\n              Decrease\r\n            </button>\r\n          </div>\r\n          <div className=\"btn-new-game smaller\">\r\n            <button onClick={this.solve}>Brute Force</button>\r\n            <button onClick={this.solve}>Breadth First Search</button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './BoxAnimation.css';\r\nimport Puzzle from './Puzzle';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Puzzle size={size} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport './SlidingPuzzle.css';\r\nimport App from './Board/App';\r\n\r\nexport default class SlidingPizzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        <App size={4} solve={this.solve}></App>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SlidingPizzle from './SlidingPuzzle/SlidingPuzzle';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SlidingPizzle></SlidingPizzle>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst BrowserRouter = require('react-router-dom').BrowserRouter;\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}