{"version":3,"sources":["SlidingPuzzle/Board/Box.jsx","SlidingPuzzle/Algorithm/Helpers.js","SlidingPuzzle/Visualize/Visualize.js","SlidingPuzzle/Algorithm/AStar/Board.js","SlidingPuzzle/Algorithm/AStar/Node.js","SlidingPuzzle/Algorithm/AStar/Solver.js","SlidingPuzzle/Algorithm/AStar/AStar.js","SlidingPuzzle/Algorithm/BreadthFirstSearch/Node.js","SlidingPuzzle/Algorithm/BreadthFirstSearch/BreadthFirstSearch.js","SlidingPuzzle/Algorithm/Algorithms.js","SlidingPuzzle/Board/Board.js","SlidingPuzzle/Board/Puzzle.jsx","SlidingPuzzle/Board/App.js","SlidingPuzzle/SlidingPuzzle.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","boxNumber","onClick","row","column","className","id","checkBoard","board","finalBoard","i","length","getFinalBoard","boardSize","current","VisualizeNoAnimation","SliderPuzzle","moves","setTimeout","move","state","animationSpeed","setState","animationActive","getDirection","currentRow","currentColumn","newRow","newColumn","Board","this","width","solvedBoard","total","push","toString","getSolvedBoard","zeroPos","getZero","directions","R","moveRight","L","moveLeft","U","moveUp","D","moveDown","directEntries","Object","entries","k","key","newMove","value","action","newBoard","j","at","to","copy","temp","curr","count","undefined","Node","parent","G","node","path","unshift","solved","actions","manhattan","H","Solver","start","queue","seen","sortQueue","shift","console","log","child","includes","sort","a","b","F","convertPathToMoves","xy","moveAmount","children","columns","Math","sqrt","setBoard","zeroIndex","index","copyBoard","childNode","printout","contains","list","isSameBoard","tracePath","convertMoves","lastBoard","numRowsColumns","movedBox","convertIndexToXY","floor","Run","Puzzle","boardObj","algorithm","tempBoard","getMatrix","rootBoard","solve","AStar","root","PathToSolution","OpenList","ClosedList","goalFound","currentNode","expandNode","currentChild","isGoal","BreadthFirstSearch","getBoard","animation","open","findOpenBox","pastMove","direction","document","getElementById","Visualize","innerHTML","size","getNewBoard","matrix","boardToMatrix","slice","matrixToBoard","newSize","rowColLength","currRow","legalFriends","getNeighbors","box","moveHelper","zero","neighbors","props","changeBoardSize","amount","isWin","clickType","newMoveInfo","makeMove","prevState","getRow","rowData","map","bNum","rows","message","replace","toUpperCase","Component","App","SlidingPizzle","Boolean","window","location","hostname","match","BrowserRouter","require","ReactDOM","render","basename","process","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b7a42d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Stateless react component\r\n// Note: the {boxNumber} is ES6 feature called Destructuring Assignment\r\n// read all about it here: http://es6-features.org/#ParameterContextMatching\r\nexport default function Box({ boxNumber, onClick, row, column }) {\r\n  const EMPTY_CLASS = 'empty';\r\n  return (\r\n    <span\r\n      onClick={onClick}\r\n      className={!boxNumber ? EMPTY_CLASS : null}\r\n      id={'box-' + row + '-' + column}\r\n      row={row}\r\n      column={column}\r\n    >\r\n      {boxNumber || ''}\r\n    </span>\r\n  );\r\n}\r\n\r\nBox.propTypes = {\r\n  onClick: PropTypes.func.isRequired,\r\n  boxNumber: PropTypes.number.isRequired\r\n};\r\n","export function checkBoard(board, finalBoard) {\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    if (board[i] !== finalBoard[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getFinalBoard(boardSize) {\r\n  const board = [];\r\n  let current = 1;\r\n  for (let i = 0; i < boardSize - 1; i += 1) {\r\n    board[i] = current;\r\n    current += 1;\r\n  }\r\n  board[boardSize - 1] = 0;\r\n  return board;\r\n}\r\n\r\n/**\r\n * Find the row and column holding the 0 value.\r\n * @param {*} board the slider board\r\n */\r\nexport function findOpenBox(board) {\r\n  for (let row = 0; row < board.length; row += 1) {\r\n    for (let column = 0; column < board.length; column += 1) {\r\n      if (board[row][column] === 0) {\r\n        return { row, column };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n","import { findOpenBox } from '../Algorithm/Helpers';\r\n\r\nexport function Visualize(SliderPuzzle, moves) {\r\n  if (!SliderPuzzle.state.animation) {\r\n    VisualizeNoAnimation(SliderPuzzle, moves);\r\n    return;\r\n  }\r\n  const open = findOpenBox(SliderPuzzle.state.board.getMatrix());\r\n  let pastMove = { row: open.row, column: open.column };\r\n  for (let i = 0; i < moves.length; i += 1) {\r\n    const { row, column } = moves[i];\r\n\r\n    setTimeout(() => {\r\n      const direction = getDirection(\r\n        row,\r\n        column,\r\n        pastMove.row,\r\n        pastMove.column\r\n      );\r\n      document.getElementById(\r\n        'box-' + row + '-' + column\r\n      ).className = direction;\r\n\r\n      setTimeout(() => {\r\n        document.getElementById('box-' + row + '-' + column).className = '';\r\n        document.getElementById(\r\n          'box-' + pastMove.row + '-' + pastMove.column\r\n        ).className = 'empty';\r\n        SliderPuzzle.move(column, row);\r\n        pastMove = { row, column };\r\n      }, 500);\r\n    }, 1000 * i);\r\n  }\r\n  setTimeout(() => {\r\n    SliderPuzzle.setState({ animationActive: false });\r\n  }, 1000 * moves.length);\r\n}\r\n\r\nconst VisualizeNoAnimation = (SliderPuzzle, moves) => {\r\n  for (let i = 0; i < moves.length; i += 1) {\r\n    const { row, column } = moves[i];\r\n    setTimeout(() => {\r\n      SliderPuzzle.move(column, row);\r\n    }, SliderPuzzle.state.animationSpeed * i);\r\n  }\r\n  setTimeout(() => {\r\n    SliderPuzzle.setState({ animationActive: false });\r\n  }, SliderPuzzle.state.animationSpeed * moves.length);\r\n};\r\n\r\nconst getDirection = (currentRow, currentColumn, newRow, newColumn) => {\r\n  if (currentRow < newRow) {\r\n    return 'move-down';\r\n  } else if (currentRow > newRow) {\r\n    return 'move-up';\r\n  } else if (currentColumn < newColumn) {\r\n    return 'move-left';\r\n  } else if (currentColumn > newColumn) {\r\n    return 'move-right';\r\n  } else {\r\n    return '';\r\n  }\r\n};\r\n","export default class Board {\r\n  /**\r\n   *\r\n   * @param {*} board the board is a 2d list with int entries\r\n   * [\r\n   *  [1, 2, 3],\r\n   *  [4, 5, 6],\r\n   *  [7, 8, 0]\r\n   * ]\r\n   */\r\n  constructor(board) {\r\n    this.width = board.length;\r\n    this.board = board;\r\n  }\r\n\r\n  /**\r\n   * Get the solved board, but in flattened form\r\n   * [[][][]] => []\r\n   */\r\n  getSolvedBoard() {\r\n    const solvedBoard = [];\r\n    const total = this.width * this.width;\r\n    for (let i = 0; i < total; i += 1) {\r\n      if (i === total - 1) {\r\n        solvedBoard.push(0);\r\n      } else {\r\n        solvedBoard.push(i + 1);\r\n      }\r\n    }\r\n    return solvedBoard;\r\n  }\r\n\r\n  // check if the board was solved\r\n  solved() {\r\n    return this.board.toString() === this.getSolvedBoard().toString();\r\n  }\r\n\r\n  /**\r\n   * Return a list of move, action pairs.\r\n   * Moves can be called to return a new board that\r\n   * result in sliding the 0 tile int he direction of the action\r\n   */\r\n  actions() {\r\n    const moves = [];\r\n    const zeroPos = this.getZero();\r\n    // all of the directions a move to make\r\n    // returns what the row and column are that it would move to\r\n    const directions = {\r\n      R: zeroPos => {\r\n        return this.moveRight(zeroPos);\r\n      },\r\n      L: zeroPos => {\r\n        return this.moveLeft(zeroPos);\r\n      },\r\n      U: zeroPos => {\r\n        return this.moveUp(zeroPos);\r\n      },\r\n      D: zeroPos => {\r\n        return this.moveDown(zeroPos);\r\n      }\r\n    };\r\n\r\n    const directEntries = Object.entries(directions);\r\n    for (let k = 0; k < directEntries.length; k += 1) {\r\n      const key = directEntries[k][0];\r\n      const value = directEntries[k][1];\r\n      const newMove = value(zeroPos);\r\n      if (newMove !== null) {\r\n        //const newBoard = createMove({ i, j }, { i: to.i, j: to.j });\r\n        //const newBoard = this.move();\r\n        moves.push({ board: newMove, action: key });\r\n      }\r\n    }\r\n\r\n    return moves;\r\n  }\r\n\r\n  /**\r\n   * Find the row and column holding the 0 value.\r\n   */\r\n  getZero() {\r\n    const board = this.board;\r\n    for (let row = 0; row < this.width; row += 1) {\r\n      for (let column = 0; column < this.width; column += 1) {\r\n        if (board[row][column] === 0) {\r\n          return { row, column };\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  // make a copy of the board\r\n  copy() {\r\n    const newBoard = [];\r\n    for (let i = 0; i < this.width; i += 1) {\r\n      const newRow = [];\r\n      for (let j = 0; j < this.width; j += 1) {\r\n        newRow.push(this.board[i][j]);\r\n      }\r\n      newBoard.push(newRow);\r\n    }\r\n    return new Board(newBoard);\r\n  }\r\n\r\n  move(at, to) {\r\n    const copy = this.copy();\r\n    let temp = copy.board[at.i][at.j];\r\n    copy.board[at.i][at.j] = copy.board[to.i][to.j];\r\n    copy.board[to.i][to.j] = temp;\r\n    return copy;\r\n  }\r\n\r\n  // count the number of misplaced tiles\r\n  manhattan() {\r\n    let curr = 0; // the current index in the solved board\r\n    let count = 0; // the count of misplaced tiles\r\n    const solvedBoard = this.getSolvedBoard();\r\n    for (let i = 0; i < this.width; i += 1) {\r\n      for (let j = 0; j < this.width; j += 1) {\r\n        if (this.board[i][j] !== solvedBoard[curr]) {\r\n          count += 1;\r\n        }\r\n        curr += 1;\r\n      }\r\n    }\r\n    return count;\r\n  }\r\n\r\n  /**\r\n   * Move the node (in 'index' position) to the right\r\n   * @param {*} board the current board\r\n   * @param {*} index the index being moved\r\n   */\r\n  moveRight(zeroPos) {\r\n    if (this.board[zeroPos.row][zeroPos.column + 1] !== undefined) {\r\n      const newBoard = this.copy();\r\n\r\n      let temp = newBoard.board[zeroPos.row][zeroPos.column + 1];\r\n      newBoard.board[zeroPos.row][zeroPos.column + 1] =\r\n        newBoard.board[zeroPos.row][zeroPos.column];\r\n      newBoard.board[zeroPos.row][zeroPos.column] = temp;\r\n\r\n      return newBoard;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //Move the node (in 'index' position) to the left\r\n  moveLeft(zeroPos) {\r\n    if (this.board[zeroPos.row][zeroPos.column - 1] !== undefined) {\r\n      const newBoard = this.copy();\r\n\r\n      let temp = newBoard.board[zeroPos.row][zeroPos.column - 1];\r\n      newBoard.board[zeroPos.row][zeroPos.column - 1] =\r\n        newBoard.board[zeroPos.row][zeroPos.column];\r\n      newBoard.board[zeroPos.row][zeroPos.column] = temp;\r\n\r\n      return newBoard;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //Move the node (in 'index' position) to up\r\n  moveUp(zeroPos) {\r\n    if (\r\n      this.board[zeroPos.row - 1] !== undefined &&\r\n      this.board[zeroPos.row - 1][zeroPos.column] !== undefined\r\n    ) {\r\n      const newBoard = this.copy();\r\n\r\n      let temp = newBoard.board[zeroPos.row - 1][zeroPos.column];\r\n      newBoard.board[zeroPos.row - 1][zeroPos.column] =\r\n        newBoard.board[zeroPos.row][zeroPos.column];\r\n      newBoard.board[zeroPos.row][zeroPos.column] = temp;\r\n\r\n      return newBoard;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  //Move the node (in 'index' position) down\r\n  moveDown(zeroPos) {\r\n    if (\r\n      this.board[zeroPos.row + 1] !== undefined &&\r\n      this.board[zeroPos.row + 1][zeroPos.column] !== undefined\r\n    ) {\r\n      const newBoard = this.copy();\r\n\r\n      let temp = newBoard.board[zeroPos.row + 1][zeroPos.column];\r\n      newBoard.board[zeroPos.row + 1][zeroPos.column] =\r\n        newBoard.board[zeroPos.row][zeroPos.column];\r\n      newBoard.board[zeroPos.row][zeroPos.column] = temp;\r\n\r\n      return newBoard;\r\n    }\r\n    return null;\r\n  }\r\n}\r\n","/**\r\n * This is the node on the board.\r\n */\r\nexport default class Node {\r\n  /**\r\n   *\r\n   * @param {*} board the current board of the node\r\n   * @param {*} parent the parent node of this node - what board proceeded this\r\n   * @param {*} action what the action was to make this board\r\n   */\r\n  constructor(board, parent, action) {\r\n    this.board = board;\r\n    this.parent = parent;\r\n    this.action = action;\r\n    if (this.parent !== undefined) {\r\n      this.G = parent.G + 1;\r\n    } else {\r\n      this.G = 0;\r\n    }\r\n  }\r\n\r\n  // return a hashable representation of the node (this)\r\n  state() {\r\n    return this.board.board.toString();\r\n  }\r\n\r\n  // reconstruct a path from this node to the root (parent) node\r\n  path() {\r\n    let node = this;\r\n    let path = [];\r\n    while (node !== undefined) {\r\n      path.unshift(node);\r\n      node = node.parent;\r\n    }\r\n\r\n    return path;\r\n  }\r\n\r\n  // check if the board is solved\r\n  solved() {\r\n    return this.board.solved();\r\n  }\r\n\r\n  // accessible actions at the current state\r\n  actions() {\r\n    return this.board.actions();\r\n  }\r\n\r\n  // get the number of misplaced tiles in the board\r\n  H() {\r\n    return this.board.manhattan();\r\n  }\r\n\r\n  F() {\r\n    return this.H() + this.G;\r\n  }\r\n\r\n  toString() {\r\n    return this.board;\r\n  }\r\n}\r\n","import Node from './Node';\r\n\r\nexport default class Solver {\r\n  /**\r\n   *\r\n   * @param {*} start the current puzzle\r\n   */\r\n  constructor(start) {\r\n    this.start = start;\r\n  }\r\n\r\n  // Preform Breadth first search and return the path to the solution if it exists\r\n  solve() {\r\n    let queue = []; // queue of boards to path through\r\n    const seen = []; // the already seen/visited boards\r\n\r\n    queue.push(new Node(this.start));\r\n    seen.push(queue[0].state());\r\n    let count = 0; // don't allow the algorithm to go on forever (max 100,000 loops)\r\n    while (queue.length !== 0 && count < 100000) {\r\n      count += 1;\r\n      queue = this.sortQueue(queue); // sort the queue\r\n\r\n      let node = queue.shift();\r\n      if (node.solved()) {\r\n        return node.path();\r\n      }\r\n      console.log(count, seen.length, queue.length);\r\n\r\n      const actions = node.actions();\r\n      for (let i = 0; i < actions.length; i += 1) {\r\n        let child = new Node(actions[i].board, node, actions[i].action);\r\n        if (!seen.includes(child.state())) {\r\n          queue.unshift(child);\r\n          seen.push(child.state());\r\n        }\r\n      }\r\n    }\r\n    return []; // return empty array - acts as no path found\r\n  }\r\n\r\n  sortQueue(queue) {\r\n    return queue.sort((a, b) => (a.F() > b.F() ? 1 : b.F() > a.F() ? -1 : 0));\r\n  }\r\n}\r\n","import Board from './Board';\r\nimport Solver from './Solver';\r\n\r\nexport function AStar(board) {\r\n  const rootBoard = new Board(board);\r\n  const solver = new Solver(rootBoard);\r\n  const path = solver.solve();\r\n  const moves = convertPathToMoves(path);\r\n  return moves;\r\n}\r\n\r\n/**\r\n * Convert the path in node form to x/y coordinates (moves on the board)\r\n * @param {*} path an array (list) of nodes\r\n */\r\nconst convertPathToMoves = path => {\r\n  const xy = [];\r\n  for (let i = 1; i < path.length; i += 1) {\r\n    xy.push(path[i].board.getZero());\r\n  }\r\n  return xy;\r\n};\r\n","import { getFinalBoard } from '../Helpers';\r\n\r\n/**\r\n * This is the node on the board.\r\n */\r\nexport default class Node {\r\n  /**\r\n   * Node Representation\r\n   * children ([Node]) - a list of the children - boards that could be made from this board\r\n   * parent (Node) - the board this board came from - the state before this one\r\n   * board ([] board) - the board representation - in 1-dimentional form [1, 2, 3, 4, ..., 0]\r\n   * columns (Integer) - the number of columns on the board\r\n   * zeroIndex (Integer) - the 0 (blank) index\r\n   */\r\n\r\n  // constructor\r\n  constructor(board, parent, moveAmount) {\r\n    this.children = [];\r\n    this.parent = parent;\r\n    this.columns = Math.sqrt(board.length, 2);\r\n    this.moveAmount = moveAmount;\r\n    // set the board of this node - make a copy\r\n    this.board = [];\r\n    this.setBoard(board);\r\n  }\r\n\r\n  /**\r\n   * Create a copy and set the board for this node\r\n   * @param {*} board the board that will be set as this node's board\r\n   */\r\n  setBoard(board) {\r\n    for (let i = 0; i < board.length; i += 1) {\r\n      this.board[i] = board[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * See if this board matches the final board\r\n   * -- if true, the board is solved\r\n   */\r\n  isGoal() {\r\n    return checkBoard(this.board);\r\n  }\r\n\r\n  /**\r\n   * Copy the board values to the newBoard\r\n   * @param {*} board board to be copied\r\n   * @param {*} newBoard board to be copied to\r\n   */\r\n  copyBoard(board, newBoard) {\r\n    for (let i = 0; i < board.length; i += 1) {\r\n      newBoard[i] = board[i];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Don't want two of same boards, so check if two are the same\r\n   * @param {*} checkBoard board to be checked against\r\n   */\r\n  isSameBoard(checkBoard) {\r\n    for (let i = 0; i < this.board.length; i += 1) {\r\n      if (this.board[i] !== checkBoard[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Return the index on the board containing zero\r\n   */\r\n  getZero() {\r\n    for (let i = 0; i < this.board.length; i += 1) {\r\n      if (this.board[i] === 0) {\r\n        return i;\r\n      }\r\n    }\r\n    return this.board.length;\r\n  }\r\n\r\n  /**\r\n   * Find the zero on the board, and apply each legal action\r\n   */\r\n  expandNode() {\r\n    this.zeroIndex = this.getZero();\r\n\r\n    this.moveRight(this.board, this.zeroIndex);\r\n    this.moveLeft(this.board, this.zeroIndex);\r\n    this.moveUp(this.board, this.zeroIndex);\r\n    this.moveDown(this.board, this.zeroIndex);\r\n  }\r\n\r\n  /**\r\n   * Move the node (in 'index' position) to the right\r\n   * @param {*} board the current board\r\n   * @param {*} index the index being moved\r\n   */\r\n  moveRight(board, index) {\r\n    if (index % this.columns < this.columns - 1) {\r\n      let newBoard = [];\r\n      this.copyBoard(board, newBoard);\r\n\r\n      let temp = newBoard[index + 1];\r\n      newBoard[index + 1] = newBoard[index];\r\n      newBoard[index] = temp;\r\n\r\n      let childNode = new Node(newBoard, this, 1);\r\n      this.children.push(childNode);\r\n    }\r\n  }\r\n\r\n  //Move the node (in 'index' position) to the left\r\n  moveLeft(board, index) {\r\n    if (index % this.columns > 0) {\r\n      let newBoard = [];\r\n      this.copyBoard(board, newBoard);\r\n\r\n      let temp = newBoard[index - 1];\r\n      newBoard[index - 1] = newBoard[index];\r\n      newBoard[index] = temp;\r\n\r\n      let childNode = new Node(newBoard, this, -1);\r\n      this.children.push(childNode);\r\n    }\r\n  }\r\n\r\n  //Move the node (in 'index' position) to up\r\n  moveUp(board, index) {\r\n    if (index - this.columns >= 0) {\r\n      let newBoard = [];\r\n      this.copyBoard(board, newBoard);\r\n\r\n      let temp = newBoard[index - this.columns];\r\n      newBoard[index - this.columns] = newBoard[index];\r\n      newBoard[index] = temp;\r\n\r\n      let childNode = new Node(newBoard, this, -this.columns);\r\n      this.children.push(childNode);\r\n    }\r\n  }\r\n\r\n  //Move the node (in 'index' position) down\r\n  moveDown(board, index) {\r\n    if (index + this.columns < board.length) {\r\n      let newBoard = [];\r\n      this.copyBoard(board, newBoard);\r\n\r\n      let temp = newBoard[index + this.columns];\r\n      newBoard[index + this.columns] = newBoard[index];\r\n      newBoard[index] = temp;\r\n\r\n      let childNode = new Node(newBoard, this, this.columns);\r\n      this.children.push(childNode);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Print the board for debugging\r\n   */\r\n  printBoard() {\r\n    let count = 0;\r\n    for (let i = 0; i < this.columns; i += 1) {\r\n      let printout = '';\r\n      for (let j = 0; j < this.columns; j += 1) {\r\n        printout += this.board[count] + ' ';\r\n        count += 1;\r\n      }\r\n      console.log(printout);\r\n    }\r\n    console.log('\\n');\r\n  }\r\n}\r\n\r\nconst checkBoard = board => {\r\n  const finalBoard = getFinalBoard(board.length);\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    if (board[i] !== finalBoard[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n};\r\n","import Node from './Node';\r\n\r\n/**\r\n * Run a search on the board\r\n * @param {*} board the root board - starting board\r\n */\r\nexport function BreadthFirstSearch(board) {\r\n  // convert the board to a Node\r\n  const root = new Node(board, null);\r\n\r\n  // contains all of the nodes that lead to the actual solution\r\n  const PathToSolution = [];\r\n  // contains all of the nodes that you can expand (QUEUE)\r\n  const OpenList = [];\r\n  // contains all of the nodes you cannot expand - already expanded (seen) - don't want to go back over them\r\n  const ClosedList = [];\r\n  // boolean to hold whether final board has been found\r\n  let goalFound = false;\r\n\r\n  // enqueue the root\r\n  OpenList.push(root);\r\n  let count = 0; // don't allow the algorithm to go on forever (max 200,000 loops)\r\n  while (OpenList.length !== 0 && !goalFound && count < 200000) {\r\n    // remove the first Node from the open list\r\n    let currentNode = OpenList.shift();\r\n    // add the removed Node to the closed list\r\n    ClosedList.push(currentNode);\r\n    console.log(count);\r\n    count += 1;\r\n\r\n    // expand the node - find the zero and apply all of the available moves\r\n    // new boards are in the child of this node\r\n    currentNode.expandNode();\r\n\r\n    for (let i = 0; i < currentNode.children.length; i += 1) {\r\n      let currentChild = currentNode.children[i];\r\n      if (currentChild.isGoal()) {\r\n        console.log('goal found!');\r\n        goalFound = true;\r\n        tracePath(PathToSolution, currentChild);\r\n      }\r\n\r\n      // if the current child is not in the open or closed lists, add it to the open list\r\n      if (\r\n        !contains(OpenList, currentChild) &&\r\n        !contains(ClosedList, currentChild)\r\n      ) {\r\n        OpenList.push(currentChild);\r\n      }\r\n    }\r\n  }\r\n  return convertMoves(PathToSolution);\r\n}\r\n\r\n/**\r\n * Check if a list of node's boards match the passed in node's board\r\n * @param {*} list the list of nodes (compared against)\r\n * @param {*} node the current node (compared to)\r\n */\r\nconst contains = (list, node) => {\r\n  for (let i = 0; i < list.length; i += 1) {\r\n    if (list[i].isSameBoard(node.board)) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\n/**\r\n * This is only called when the goal node is found\r\n *\r\n * @param {*} path\r\n * @param {*} node the goal node\r\n */\r\nconst tracePath = (path, node) => {\r\n  console.log('Tracing Path...');\r\n  let current = node;\r\n  path.unshift(current);\r\n\r\n  while (current.parent !== null) {\r\n    current = current.parent;\r\n    path.unshift(current);\r\n  }\r\n};\r\n\r\n// convert the given list of 'moves' to x/y coordinates\r\nconst convertMoves = moves => {\r\n  const xy = [];\r\n  let lastBoard = moves[0];\r\n  const numRowsColumns = moves[0].columns;\r\n  for (let i = 1; i < moves.length; i += 1) {\r\n    const movedBox = lastBoard.zeroIndex + moves[i].moveAmount;\r\n    const temp = convertIndexToXY(numRowsColumns, movedBox);\r\n    xy.push(temp);\r\n    lastBoard = moves[i];\r\n  }\r\n  return xy;\r\n};\r\n\r\nconst convertIndexToXY = (numRowsColumns, index) => {\r\n  return {\r\n    row: Math.floor(index / numRowsColumns),\r\n    column: index % numRowsColumns\r\n  };\r\n};\r\n","import { Visualize } from '../Visualize/Visualize';\r\nimport { AStar } from './AStar/AStar';\r\nimport { BreadthFirstSearch } from './BreadthFirstSearch/BreadthFirstSearch';\r\n\r\nexport function Run(Puzzle, boardObj, algorithm) {\r\n  const tempBoard = boardObj.getMatrix();\r\n  let moves = [];\r\n  switch (algorithm) {\r\n    case 'AStar':\r\n      moves = AStar(boardObj.getMatrix());\r\n      break;\r\n    case 'BreadthFirstSearch':\r\n      moves = BreadthFirstSearch(boardObj.getBoard());\r\n      break;\r\n    default:\r\n      console.log('no algorithm');\r\n      break;\r\n  }\r\n  console.log(tempBoard);\r\n  console.log(moves);\r\n  if (moves.length > 0) {\r\n    Visualize(Puzzle, moves);\r\n  } else {\r\n    document.getElementById('algorithm-result').innerHTML = 'No Solution Found';\r\n    Puzzle.setState({ animationActive: false });\r\n  }\r\n}\r\n","const EMPTY = 0;\r\n\r\nexport default class Board {\r\n  constructor(size) {\r\n    const board = this.getNewBoard(size);\r\n    this.board = board;\r\n    this.matrix = boardToMatrix(board);\r\n    this.size = size;\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the board\r\n   */\r\n  getBoard() {\r\n    return this.board.slice(0);\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the matrix\r\n   */\r\n  getMatrix() {\r\n    return this.matrix;\r\n  }\r\n\r\n  getNewBoard(size) {\r\n    return [1, 6, 8, 7, 4, 5, 3, 0, 2];\r\n    return scramble(Array.from({ length: size * size }, (_, b) => b));\r\n  }\r\n\r\n  makeMove(newRow, newColumn) {\r\n    return move(this.getMatrix(), newRow, newColumn);\r\n  }\r\n\r\n  setBoard(matrix) {\r\n    this.board = matrixToBoard(matrix);\r\n    this.matrix = matrix;\r\n  }\r\n\r\n  changeBoardSize(newSize) {\r\n    const board = this.getNewBoard(newSize);\r\n    this.board = board;\r\n    this.matrix = boardToMatrix(board);\r\n    this.size = newSize;\r\n  }\r\n}\r\n\r\n/**\r\n * Scrambles the board randomly in a solvable way.\r\n */\r\nconst scramble = board => {\r\n  return board.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst boardToMatrix = board => {\r\n  const rowColLength = Math.sqrt(board.length, 2);\r\n  const matrix = [];\r\n  let count = 0;\r\n  for (let row = 0; row < rowColLength; row += 1) {\r\n    const currRow = [];\r\n    for (let column = 0; column < rowColLength; column += 1) {\r\n      currRow.push(board[count]);\r\n      count += 1;\r\n    }\r\n    matrix.push(currRow);\r\n  }\r\n  return matrix;\r\n};\r\n\r\nconst matrixToBoard = matrix => {\r\n  const board = [];\r\n  let count = 0;\r\n  for (let row = 0; row < matrix.length; row += 1) {\r\n    for (let column = 0; column < matrix.length; column += 1) {\r\n      board.push(matrix[row][column]);\r\n      count += 1;\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\n/**\r\n * moves the tile at the given (i,j) cordinates\r\n * to the current empty space (only if legal)\r\n * @param {*} i row index\r\n * @param {*} j column index\r\n */\r\nconst move = (board, row, column) => {\r\n  let legalFriends = getNeighbors(board, row, column);\r\n  for (let i = 0; i < legalFriends.length; i += 1) {\r\n    const box = legalFriends[i];\r\n    if (box.value === EMPTY) {\r\n      return {\r\n        board: moveHelper(board, box, row, column),\r\n        row: box.row,\r\n        column: box.column\r\n      };\r\n    }\r\n  }\r\n  return {\r\n    board,\r\n    newRow: null,\r\n    newColumn: null\r\n  };\r\n};\r\n\r\nconst moveHelper = (board, zero, row, column) => {\r\n  const newBoard = [];\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    const newRow = [];\r\n    for (let j = 0; j < board.length; j += 1) {\r\n      newRow.push(board[i][j]);\r\n    }\r\n    newBoard.push(newRow);\r\n  }\r\n  newBoard[zero.row][zero.column] = newBoard[row][column];\r\n  newBoard[row][column] = EMPTY;\r\n  return newBoard;\r\n};\r\n\r\nconst getNeighbors = (board, row, column) => {\r\n  const neighbors = [];\r\n  if (board[row - 1] !== undefined && board[row - 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row - 1][column],\r\n      row: row - 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row + 1] !== undefined && board[row + 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row + 1][column],\r\n      row: row + 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row][column - 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column - 1],\r\n      row: row,\r\n      column: column - 1\r\n    });\r\n\r\n  if (board[row][column + 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column + 1],\r\n      row: row,\r\n      column: column + 1\r\n    });\r\n\r\n  return neighbors;\r\n};\r\n","import React, { Component } from 'react';\r\nimport Box from './Box';\r\nimport { Run } from '../Algorithm/Algorithms';\r\nimport { checkBoard, getFinalBoard } from '../Algorithm/Helpers';\r\nimport Board from './Board';\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const board = new Board(this.props.size);\r\n    this.state = {\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getBoard(), getFinalBoard(board.board.length)),\r\n      //animation true false - slows algorithm solving if true\r\n      animation: false,\r\n      animationSpeed: 10, // only matters if flase - if true, animation speed it fixed\r\n      animationActive: false\r\n    };\r\n  }\r\n\r\n  changeBoardSize = amount => {\r\n    document.getElementById('algorithm-result').innerHTML = '';\r\n    if (this.state.animationActive) return;\r\n    const newSize = this.state.board.size + amount;\r\n    if (newSize < 3 || newSize > 10) return;\r\n    this.state.board.changeBoardSize(newSize);\r\n    this.setState({\r\n      moves: 0,\r\n      isWin: checkBoard(\r\n        this.state.board.getBoard(),\r\n        getFinalBoard(this.state.board.board.length)\r\n      )\r\n    });\r\n  };\r\n\r\n  //note declaring class function as an arrow function gives us automatic 'this' binding.\r\n  // in y, x\r\n  move = (column, row, clickType) => {\r\n    if (clickType === 'manual' && this.state.animationActive) return;\r\n    if (this.state.isWin) return;\r\n\r\n    const newMoveInfo = this.state.board.makeMove(row, column);\r\n    if (newMoveInfo.newRow !== null) {\r\n      this.state.board.setBoard(newMoveInfo.board);\r\n      this.setState(prevState => ({\r\n        moves: prevState.moves + 1,\r\n        isWin: checkBoard(\r\n          this.state.board.getBoard(),\r\n          getFinalBoard(this.state.board.board.length)\r\n        )\r\n      }));\r\n    }\r\n  };\r\n\r\n  /**\r\n   * returns a single slider row given the row data\r\n   * @param {Object} rowData row data\r\n   * @param {Number} i row number\r\n   */\r\n  getRow = (rowData, j) => {\r\n    return (\r\n      <div key={j}>\r\n        {rowData.map((bNum, i) => (\r\n          <Box\r\n            key={bNum}\r\n            boxNumber={bNum}\r\n            row={j}\r\n            column={i}\r\n            onClick={() => this.move(i, j, 'manual')}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  solve = algorithm => {\r\n    if (this.state.animationActive) return;\r\n    this.setState({ animationActive: true });\r\n    Run(this, this.state.board, algorithm);\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.board.getMatrix().map(this.getRow);\r\n    let message =\r\n      (this.state.isWin ? 'Winner !!! ' : 'Total ') +\r\n      `Moves: ${this.state.moves\r\n        .toString()\r\n        .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ',')}`;\r\n    return (\r\n      <>\r\n        <span className=\"slider-msg-3\" id=\"algorithm-result\"></span>\r\n        Slider Puzzle Solver {this.state.board.size}x{this.state.board.size}\r\n        <div className=\"slider-board\">\r\n          {rows}\r\n          <span className=\"slider-msg\">{message}</span>\r\n          <div className=\"btn-new-game\">\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(0);\r\n              }}\r\n            >\r\n              New Game\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(1);\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(-1);\r\n              }}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n          <span className=\"slider-msg-2\">\r\n            Solve Speed: {10000 - this.state.animationSpeed + 10}\r\n          </span>\r\n          <div>\r\n            <button\r\n              className=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animationSpeed:\r\n                    prevState.animationSpeed >= 100\r\n                      ? prevState.animationSpeed < 10000\r\n                        ? prevState.animationSpeed + 100\r\n                        : prevState.animationSpeed\r\n                      : prevState.animationSpeed + 10\r\n                }));\r\n              }}\r\n            >\r\n              Decrease\r\n            </button>\r\n            <button\r\n              className=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animation: !prevState.animation\r\n                }));\r\n              }}\r\n            >\r\n              Animation Active: {this.state.animation.toString().toUpperCase()}\r\n            </button>\r\n            <button\r\n              className=\"speed-change-btn\"\r\n              onClick={() => {\r\n                this.setState(prevState => ({\r\n                  animationSpeed:\r\n                    prevState.animationSpeed > 100\r\n                      ? prevState.animationSpeed - 100\r\n                      : prevState.animationSpeed > 10\r\n                      ? prevState.animationSpeed - 10\r\n                      : 10\r\n                }));\r\n              }}\r\n            >\r\n              Increase\r\n            </button>\r\n          </div>\r\n          <div className=\"btn-new-game smaller\">\r\n            <button onClick={() => this.solve('AStar')}>A-Star</button>\r\n            <button onClick={() => this.solve('BreadthFirstSearch')}>\r\n              Brute Force\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport './BoxAnimation.css';\r\nimport Puzzle from './Puzzle';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Puzzle size={size} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport './SlidingPuzzle.css';\r\nimport App from './Board/App';\r\n\r\nexport default class SlidingPizzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        <App size={3} solve={this.solve}></App>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SlidingPizzle from './SlidingPuzzle/SlidingPuzzle';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SlidingPizzle></SlidingPizzle>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst BrowserRouter = require('react-router-dom').BrowserRouter;\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}