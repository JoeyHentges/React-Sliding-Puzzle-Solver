{"version":3,"sources":["SlidingPuzzle/Board/Box.jsx","SlidingPuzzle/Algorithm/Helpers.js","SlidingPuzzle/Algorithm/BruteForce.js","SlidingPuzzle/Algorithm/Algorithms.js","SlidingPuzzle/Visualize/Visualize.js","SlidingPuzzle/Board/Board.js","SlidingPuzzle/Board/Puzzle.jsx","SlidingPuzzle/Board/App.js","SlidingPuzzle/SlidingPuzzle.jsx","App.js","serviceWorker.js","index.js"],"names":["Box","boxNumber","onClick","className","EMPTY","checkBoard","board","finalBoard","row","length","column","getFinalBoard","boardSize","current","newRow","push","findOpenBox","move","legalFriends","getNeighbors","i","box","value","moveHelper","zero","newBoard","j","neighbors","undefined","getRandomXY","Math","floor","random","Run","Puzzle","algorithm","moves","count","currentBoard","slice","BruteForce","console","log","SliderPuzzle","setTimeout","Visualize","Board","size","this","getNewBoard","matrix","boardToMatrix","scramble","Array","from","_","b","getMatrix","matrixToBoard","sort","rowColLength","sqrt","currRow","props","newGame","setState","isWin","changeBoardSize","amount","newSize","state","makeMove","prevState","getRow","rowData","key","map","bNum","solve","boardCopy","rows","message","Component","App","SlidingPizzle","Boolean","window","location","hostname","match","BrowserRouter","require","ReactDOM","render","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.377fb30f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// Stateless react component\r\n// Note: the {boxNumber} is ES6 feature called Destructuring Assignment\r\n// read all about it here: http://es6-features.org/#ParameterContextMatching \r\nexport default function Box({boxNumber,onClick}){\r\n    const EMPTY_CLASS=\"empty\"\r\n    return <span onClick={onClick} className={!boxNumber?EMPTY_CLASS:null}>{boxNumber || \"\"}</span>;\r\n}\r\n\r\nBox.propTypes = {\r\n    onClick: PropTypes.func.isRequired,\r\n    boxNumber: PropTypes.number.isRequired\r\n};","const EMPTY = 0;\r\n\r\nexport function checkBoard(board, finalBoard) {\r\n  for (let row = 0; row < board.length; row += 1) {\r\n    for (let column = 0; column < board.length; column += 1) {\r\n      if (board[row][column] !== finalBoard[row][column]) {\r\n        return false;\r\n      }\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport function getFinalBoard(boardSize) {\r\n  const board = [];\r\n  let current = 1;\r\n  for (let row = 0; row < boardSize; row += 1) {\r\n    const newRow = [];\r\n    for (let column = 0; column < boardSize; column += 1) {\r\n      newRow.push(current);\r\n      current += 1;\r\n    }\r\n    board.push(newRow);\r\n  }\r\n  board[boardSize - 1][boardSize - 1] = 0;\r\n  return board;\r\n}\r\n\r\n/**\r\n * Find the row and column holding the 0 value.\r\n * @param {*} board the slider board\r\n */\r\nexport function findOpenBox(board) {\r\n  for (let row = 0; row < board.length; row += 1) {\r\n    for (let column = 0; column < board.length; column += 1) {\r\n      if (board[row][column] === 0) {\r\n        return { row, column };\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\n/**\r\n * moves the tile at the given (i,j) cordinates\r\n * to the current empty space (only if legal)\r\n * @param {*} i row index\r\n * @param {*} j column index\r\n */\r\nexport function move(board, row, column) {\r\n  let legalFriends = getNeighbors(board, row, column);\r\n  for (let i = 0; i < legalFriends.length; i += 1) {\r\n    const box = legalFriends[i];\r\n    if (box.value === EMPTY) {\r\n      return moveHelper(board, box, row, column);\r\n    }\r\n  }\r\n  return board;\r\n}\r\n\r\nconst moveHelper = (board, zero, row, column) => {\r\n  const newBoard = [];\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    const newRow = [];\r\n    for (let j = 0; j < board.length; j += 1) {\r\n      newRow.push(board[i][j]);\r\n    }\r\n    newBoard.push(newRow);\r\n  }\r\n  newBoard[zero.row][zero.column] = newBoard[row][column];\r\n  newBoard[row][column] = EMPTY;\r\n  return newBoard;\r\n};\r\n\r\nexport function getNeighbors(board, row, column) {\r\n  const neighbors = [];\r\n  if (board[row - 1] !== undefined && board[row - 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row - 1][column],\r\n      row: row - 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row + 1] !== undefined && board[row + 1][column] !== undefined)\r\n    neighbors.push({\r\n      value: board[row + 1][column],\r\n      row: row + 1,\r\n      column: column\r\n    });\r\n\r\n  if (board[row][column - 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column - 1],\r\n      row: row,\r\n      column: column - 1\r\n    });\r\n\r\n  if (board[row][column + 1] !== undefined)\r\n    neighbors.push({\r\n      value: board[row][column + 1],\r\n      row: row,\r\n      column: column + 1\r\n    });\r\n\r\n  return neighbors;\r\n}\r\n","import {\r\n  getFinalBoard,\r\n  move,\r\n  getNeighbors,\r\n  findOpenBox,\r\n  checkBoard\r\n} from './Helpers';\r\n\r\nexport function BruteForce(board) {\r\n  const finalBoard = getFinalBoard(board.length);\r\n  const moves = [];\r\n  let count = 0;\r\n  let currentBoard = board.slice();\r\n\r\n  while (!checkBoard(currentBoard, finalBoard) && count < 100) {\r\n    const random = getRandomXY(currentBoard, findOpenBox(currentBoard));\r\n    currentBoard = move(currentBoard, random.row, random.column);\r\n    moves.push({ row: random.row, column: random.column });\r\n    count += 1;\r\n  }\r\n\r\n  return moves;\r\n}\r\n\r\nfunction getRandomXY(board, { row, column }) {\r\n  const neighbors = getNeighbors(board, row, column);\r\n  return neighbors[Math.floor(Math.random() * neighbors.length)];\r\n}\r\n","import { BruteForce } from './BruteForce';\r\nimport { Visualize } from '../Visualize/Visualize';\r\n\r\nexport function Run(Puzzle, board, algorithm) {\r\n  let moves = [];\r\n  switch (algorithm) {\r\n    case 'BruteForce':\r\n      moves = BruteForce(board);\r\n      break;\r\n    default:\r\n      console.log('no algorithm');\r\n      break;\r\n  }\r\n  if (moves.length > 0) Visualize(Puzzle, moves);\r\n}\r\n","export function Visualize(SliderPuzzle, moves) {\r\n  let count = 0;\r\n  for (let i = 0; i < moves.length; i += 1) {\r\n    setTimeout(() => {\r\n      const { row, column } = moves[count];\r\n      SliderPuzzle.move(row, column);\r\n      count += 1;\r\n    }, 100 * i);\r\n  }\r\n}\r\n","import { getNeighbors } from '../Algorithm/Helpers';\r\n\r\nconst EMPTY = 0;\r\n\r\nexport default class Board {\r\n  constructor(size) {\r\n    const board = this.getNewBoard(size);\r\n    this.board = board;\r\n    this.matrix = boardToMatrix(board);\r\n    this.size = size;\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the board\r\n   */\r\n  getBoard() {\r\n    return this.board.slice(0);\r\n  }\r\n\r\n  /**\r\n   * Return a copy of the matrix\r\n   */\r\n  getMatrix() {\r\n    return this.matrix;\r\n  }\r\n\r\n  getNewBoard(size) {\r\n    return scramble(Array.from({ length: size * size }, (_, b) => b));\r\n  }\r\n\r\n  makeMove(row, column) {\r\n    const newBoard = move(this.getMatrix(), row, column);\r\n    this.board = matrixToBoard(newBoard);\r\n    this.matrix = newBoard;\r\n  }\r\n}\r\n\r\n/**\r\n * Scrambles the board randomly in a solvable way.\r\n */\r\nconst scramble = board => {\r\n  return board.sort(() => Math.random() - 0.5);\r\n};\r\n\r\nconst boardToMatrix = board => {\r\n  const rowColLength = Math.sqrt(board.length, 2);\r\n  const matrix = [];\r\n  let count = 0;\r\n  for (let row = 0; row < rowColLength; row += 1) {\r\n    const currRow = [];\r\n    for (let column = 0; column < rowColLength; column += 1) {\r\n      currRow.push(board[count]);\r\n      count += 1;\r\n    }\r\n    matrix.push(currRow);\r\n  }\r\n  return matrix;\r\n};\r\n\r\nconst matrixToBoard = matrix => {\r\n  const board = [];\r\n  let count = 0;\r\n  for (let row = 0; row < matrix.length; row += 1) {\r\n    for (let column = 0; column < matrix.length; column += 1) {\r\n      board.push(matrix[count]);\r\n      count += 1;\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\n/**\r\n * moves the tile at the given (i,j) cordinates\r\n * to the current empty space (only if legal)\r\n * @param {*} i row index\r\n * @param {*} j column index\r\n */\r\nconst move = (board, row, column) => {\r\n  let legalFriends = getNeighbors(board, row, column);\r\n  for (let i = 0; i < legalFriends.length; i += 1) {\r\n    const box = legalFriends[i];\r\n    if (box.value === EMPTY) {\r\n      return moveHelper(board, box, row, column);\r\n    }\r\n  }\r\n  return board;\r\n};\r\n\r\nconst moveHelper = (board, zero, row, column) => {\r\n  const newBoard = [];\r\n  for (let i = 0; i < board.length; i += 1) {\r\n    const newRow = [];\r\n    for (let j = 0; j < board.length; j += 1) {\r\n      newRow.push(board[i][j]);\r\n    }\r\n    newBoard.push(newRow);\r\n  }\r\n  newBoard[zero.row][zero.column] = newBoard[row][column];\r\n  newBoard[row][column] = EMPTY;\r\n  return newBoard;\r\n};\r\n","import React, { Component } from 'react';\r\nimport Box from './Box';\r\nimport { Run } from '../Algorithm/Algorithms';\r\nimport { checkBoard, getFinalBoard } from '../Algorithm/Helpers';\r\nimport Board from './Board';\r\n\r\nclass Puzzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    const board = new Board(this.props.size);\r\n    this.state = {\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size))\r\n    };\r\n  }\r\n\r\n  newGame = () => {\r\n    const board = new Board(this.props.size);\r\n    this.setState({\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size))\r\n    });\r\n  };\r\n\r\n  changeBoardSize = amount => {\r\n    const newSize = this.state.board.size + amount;\r\n    if (newSize < 3 || newSize > 10) return;\r\n    const board = new Board(newSize);\r\n    this.setState({\r\n      board,\r\n      moves: 0,\r\n      isWin: checkBoard(board.getMatrix(), getFinalBoard(board.size))\r\n    });\r\n  };\r\n\r\n  //note declaring class function as an arrow function gives us automatic 'this' binding.\r\n  // in y, x\r\n  move = (column, row) => {\r\n    if (this.state.isWin) return;\r\n    this.state.board.makeMove(row, column);\r\n    this.setState(prevState => ({\r\n      moves: prevState.moves + 1,\r\n      isWin: checkBoard(\r\n        this.state.board.getMatrix(),\r\n        getFinalBoard(this.state.board.size)\r\n      )\r\n    }));\r\n  };\r\n\r\n  /**\r\n   * returns a single slider row given the row data\r\n   * @param {Object} rowData row data\r\n   * @param {Number} i row number\r\n   */\r\n  getRow = (rowData, j) => {\r\n    return (\r\n      <div key={j}>\r\n        {rowData.map((bNum, i) => (\r\n          <Box key={bNum} boxNumber={bNum} onClick={() => this.move(i, j)} />\r\n        ))}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  solve = () => {\r\n    const boardCopy = this.state.board.getMatrix();\r\n    Run(this, boardCopy, 'BruteForce');\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.board.getMatrix().map(this.getRow);\r\n    let message =\r\n      (this.state.isWin ? 'Winner !!! ' : 'Total ') +\r\n      `Moves: ${this.state.moves}`;\r\n\r\n    return (\r\n      <>\r\n        Slider Puzzle Solver {this.state.board.size}x{this.state.board.size}\r\n        <div className=\"slider-board\">\r\n          {rows}\r\n          <span className=\"slider-msg\">{message}</span>\r\n          <div className=\"btn-new-game\">\r\n            <button onClick={this.newGame}>New Game</button>\r\n            <button onClick={this.solve}>Solve</button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(1);\r\n              }}\r\n            >\r\n              +\r\n            </button>\r\n            <button\r\n              onClick={() => {\r\n                this.changeBoardSize(-1);\r\n              }}\r\n            >\r\n              -\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Puzzle;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Puzzle from './Puzzle';\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const { size } = this.props;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Puzzle size={size} />\r\n        </header>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React, { Component } from 'react';\r\n\r\nimport './SlidingPuzzle.css';\r\nimport App from './Board/App';\r\n\r\nexport default class SlidingPizzle extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"board\">\r\n        <App size={4} solve={this.solve}></App>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport SlidingPizzle from './SlidingPuzzle/SlidingPuzzle';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <SlidingPizzle></SlidingPizzle>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nconst BrowserRouter = require('react-router-dom').BrowserRouter;\r\n\r\nReactDOM.render(\r\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}